{
    "pipes": [],
    "interfaces": [
        {
            "name": "ActivityLog",
            "id": "interface-ActivityLog-d16250a1dbc9dfcabc4617d9adbb42974c5bda15586d651ba6ce3fb77fc880231c3cfefbb0815fd71eff11fac0d98f32b589bb0c19291d618aa5cc4ab9b44b1f",
            "file": "src/app/_models/activityLog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ActivityLog{\r\n    id: string,\r\n    cardId: string,\r\n    action: string,\r\n    cardName: string,\r\n    before: string,\r\n    after: string,\r\n    timestamp: Date\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "after",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "before",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "cardName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-d6eb92b2be92ba7e7eae03b9994ad70bd5322abd439e87bb7e94b27bb61a9b9d036123b692912e7a70ba856e76d31cf320c4f47595562dbfbd1ec08d9bf4c130",
            "file": "src/app/store/appSate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BoardsState } from \"./BoardsState\";\r\n\r\nexport interface AppState{\r\n    boards: BoardsState\r\n}",
            "properties": [
                {
                    "name": "boards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardsState",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Board",
            "id": "interface-Board-44c8cc0041918ffa5c7b2f97206878cec80e821244e0ec4085e654f416432fd8106c9da7be0c56e1faf32ca7f8e7360ccac99946e5fd7b261d3f8561b919d60d",
            "file": "src/app/_models/board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { List } from \"./list\";\r\n\r\nexport interface Board{\r\n    id: string,\r\n    name: string,\r\n    createdAt: Date,\r\n    lists: List[]\r\n}",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "List[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardsState",
            "id": "interface-BoardsState-142bc5bf93475fbd72a702a74a65184cb78eefb0c409221ba86d70c1ce8ff5ca055d671d4da08a64efff50e127d1b56c623e823f4b63f313624c8b151d631430",
            "file": "src/app/store/BoardsState.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Board } from \"../_models/board\";\r\nimport { List } from \"../_models/list\";\r\n\r\nexport interface BoardsState{\r\n    boards: Board[];\r\n    currentBoard?: Board;\r\n    currentBoardLists?: List[]\r\n    error: string | null;\r\n}",
            "properties": [
                {
                    "name": "boards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "currentBoard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "currentBoardLists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "List[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Card",
            "id": "interface-Card-8ef99c67290cd9f1594086fe5cf3769c1bc4dcd98ac25c8227edaa3dba5fc9869d68daf04b8fd0a74e830efa4ba23822b84d602c5098540248a6988986f7fc3e",
            "file": "src/app/_models/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Card{\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    priority: number;\r\n    boardListId: string;\r\n    boardId: string;\r\n    dueDate: Date;\r\n    createdAt?: Date;\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "boardListId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardDto",
            "id": "interface-CardDto-83cedf4c3df91470c600f69aac4c0a46fcddbb4150e4c88b26be985907824af16d079db73c2d9594fd41466f88b471d675f9722d5bb879f1da8f5917d1b080c3",
            "file": "src/app/_models/cardDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CardDto {\r\n    name: string;\r\n    description: string;\r\n    dueDate: Date;\r\n    priority: number;\r\n    boardListId: string;\r\n    boardId: string;\r\n  }",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "boardListId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "List",
            "id": "interface-List-218361279d6a12425541a3cd203d68c75404b2c2e34fdaed9d0c63676dee5d7d25b0390d167d8daeb308fc33b387e91d70a6926c34ce13d4ca61c7e0609cf88c",
            "file": "src/app/_models/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Card } from \"./card\";\r\n\r\nexport interface List{\r\n    id: string,\r\n    name: string,\r\n    createdAt: Date,\r\n    cards?: Card[],\r\n    boardId: string\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ActivityService",
            "id": "injectable-ActivityService-3f29b60d8e791d6fc162e05469e58416e5af65e6b601758bea455e31f9af9414b60d9710309f370b27815ad5ef471341c1831fd825f81b4b31f13b8404897bc8",
            "file": "src/app/_services/activity.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "getByBoardId",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActivityLog[]>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByCardId",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActivityLog[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { ActivityLog } from '../_models/activityLog';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivityService {\n\n  constructor(private http: HttpClient) { }\n  baseUrl = environment.apiUrl;\n  \n  getByCardId(cardId: string) : Observable<ActivityLog[]> {\n    return this.http.get<ActivityLog[]>(`${this.baseUrl}/ActivityLog/${cardId}`);\n  }\n  getByBoardId(boardId: string, pageNumber: number = 1, pageSize: number = 10): Observable<ActivityLog[]> {\n    const params = new HttpParams()\n      .set('pageNumber', pageNumber.toString())\n      .set('pageSize', pageSize.toString());\n\n    const url = `${this.baseUrl}/ActivityLog/board/${boardId}`;\n    return this.http.get<ActivityLog[]>(url, { params });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardsEffects",
            "id": "injectable-BoardsEffects-84d1c609854515ca05b5de1baa1f01421bc278b1d5844f9032fa98a3727aeef243a9f34eb5d6c6300d3ea17f4c9344103264b8a006f0d9aa30d4127eafec1f4d",
            "file": "src/app/store/effects/boards.effect.ts",
            "properties": [
                {
                    "name": "addBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n          ofType(BoardActions.addBoard),\r\n          mergeMap(action =>\r\n            this.boardsService.addBoard(action.title).pipe(\r\n              switchMap(board => [\r\n                BoardActions.addBoardSuccess({ board }),\r\n                BoardActions.selectBoard({ boardId: board.id }) \r\n              ]),\r\n              catchError(error => of(BoardActions.addBoardFailure({ error: error.message })))\r\n            )\r\n          )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "deleteBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n          ofType(BoardActions.deleteBoard),\r\n          mergeMap(action =>\r\n            this.boardsService.deleteBoard(action.boardId).pipe(\r\n              switchMap(() => [\r\n                BoardActions.deleteBoardSuccess({ boardId: action.boardId }),\r\n                BoardActions.clearCurrentBoard()\r\n              ]),\r\n              catchError(error => of(BoardActions.deleteBoardFailure({ error: error.message })))\r\n            )\r\n          )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "getBoards$",
                    "defaultValue": "createEffect(() => \r\n        this.actions$.pipe(\r\n            ofType(BoardActions.loadBoards),\r\n            mergeMap(() =>\r\n                this.boardsService.getBoards()\r\n                    .pipe(\r\n                        map(boards => BoardActions.loadBoardsSuccess({ boards })),\r\n                        catchError(error => of(BoardActions.loadBoardsFailure({ error: error.message })))\r\n                    )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "loadLists$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.loadBoardLists),\r\n            mergeMap(action =>\r\n                this.listService.getListsByBoardId(action.boardId).pipe(\r\n                    map(lists => BoardActions.loadBoardListsSuccess({ lists })),\r\n                    catchError(error => of(BoardActions.loadBoardListsFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "selectBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.selectBoard),\r\n            mergeMap(action =>\r\n                this.boardsService.getById(action.boardId)\r\n                    .pipe(\r\n                        map(board => BoardActions.selectBoardSuccess({ board })),\r\n                        catchError(error => of(BoardActions.selectBoardFailure({ error: error.message })))\r\n                    )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "storeSelectedBoardId$",
                    "defaultValue": "createEffect(() => \r\n        this.actions$.pipe(\r\n          ofType(BoardActions.selectBoard),\r\n          tap(action => localStorage.setItem('currentBoardId', action.boardId))\r\n        ),\r\n        { dispatch: false }\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "updateBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n          ofType(BoardActions.updateBoard),\r\n          mergeMap(action =>\r\n            this.boardsService.updateBoard(action.board).pipe(\r\n              switchMap(board => [\r\n                BoardActions.updateBoardSuccess({ board: action.board }),\r\n                BoardActions.selectBoard({ boardId: action.board.id })  // Ensure the board ID is set correctly\r\n              ]),\r\n              catchError(error => of(BoardActions.updateBoardFailure({ error: error.message })))\r\n            )\r\n          )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "updateCard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.updateCard),\r\n            exhaustMap(action =>\r\n                this.cardsService.updateCard(action.card, action.card.id).pipe(\r\n                    switchMap(updatedCard => [\r\n                        BoardActions.updateCardSuccess({ card: action.card }),\r\n                        BoardActions.loadBoardLists({ boardId: action.card.boardId })\r\n                    ]),\r\n                    catchError(error => of(BoardActions.updateCardFailure({\r\n                        error: error.message\r\n                    })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "updateList$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.updateList),\r\n            exhaustMap(action =>\r\n                this.listService.updateList(action.list).pipe(\r\n                    switchMap(updatedList => [\r\n                        BoardActions.updateListSuccess({ list: action.list }),\r\n                        BoardActions.loadBoardLists({ boardId: action.list.boardId })\r\n                    ]),\r\n                    catchError(error => of(BoardActions.updateListFailure({\r\n                        error: error.message\r\n                    })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { catchError, concatMap, exhaustMap, filter, map, mergeMap, of, switchMap, take, tap } from \"rxjs\";\r\nimport * as BoardActions from '../actions/boards.actions';\r\nimport { BoardService } from \"src/app/_services/board.service\";\r\nimport { Board } from 'src/app/_models/board';\r\nimport { AppState } from \"../appSate\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ListService } from \"src/app/_services/list.service\";\r\nimport { CardService } from \"src/app/_services/card.service\";\r\n\r\n@Injectable()\r\nexport class BoardsEffects {\r\n\r\n    selectBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.selectBoard),\r\n            mergeMap(action =>\r\n                this.boardsService.getById(action.boardId)\r\n                    .pipe(\r\n                        map(board => BoardActions.selectBoardSuccess({ board })),\r\n                        catchError(error => of(BoardActions.selectBoardFailure({ error: error.message })))\r\n                    )\r\n            )\r\n        )\r\n    );\r\n\r\n    storeSelectedBoardId$ = createEffect(() => \r\n        this.actions$.pipe(\r\n          ofType(BoardActions.selectBoard),\r\n          tap(action => localStorage.setItem('currentBoardId', action.boardId))\r\n        ),\r\n        { dispatch: false }\r\n    );\r\n\r\n    getBoards$ = createEffect(() => \r\n        this.actions$.pipe(\r\n            ofType(BoardActions.loadBoards),\r\n            mergeMap(() =>\r\n                this.boardsService.getBoards()\r\n                    .pipe(\r\n                        map(boards => BoardActions.loadBoardsSuccess({ boards })),\r\n                        catchError(error => of(BoardActions.loadBoardsFailure({ error: error.message })))\r\n                    )\r\n            )\r\n        )\r\n    );\r\n\r\n    addBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n          ofType(BoardActions.addBoard),\r\n          mergeMap(action =>\r\n            this.boardsService.addBoard(action.title).pipe(\r\n              switchMap(board => [\r\n                BoardActions.addBoardSuccess({ board }),\r\n                BoardActions.selectBoard({ boardId: board.id }) \r\n              ]),\r\n              catchError(error => of(BoardActions.addBoardFailure({ error: error.message })))\r\n            )\r\n          )\r\n        )\r\n    );\r\n\r\n    updateBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n          ofType(BoardActions.updateBoard),\r\n          mergeMap(action =>\r\n            this.boardsService.updateBoard(action.board).pipe(\r\n              switchMap(board => [\r\n                BoardActions.updateBoardSuccess({ board: action.board }),\r\n                BoardActions.selectBoard({ boardId: action.board.id })  // Ensure the board ID is set correctly\r\n              ]),\r\n              catchError(error => of(BoardActions.updateBoardFailure({ error: error.message })))\r\n            )\r\n          )\r\n        )\r\n    );\r\n\r\n    deleteBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n          ofType(BoardActions.deleteBoard),\r\n          mergeMap(action =>\r\n            this.boardsService.deleteBoard(action.boardId).pipe(\r\n              switchMap(() => [\r\n                BoardActions.deleteBoardSuccess({ boardId: action.boardId }),\r\n                BoardActions.clearCurrentBoard()\r\n              ]),\r\n              catchError(error => of(BoardActions.deleteBoardFailure({ error: error.message })))\r\n            )\r\n          )\r\n        )\r\n    );\r\n\r\n    loadLists$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.loadBoardLists),\r\n            mergeMap(action =>\r\n                this.listService.getListsByBoardId(action.boardId).pipe(\r\n                    map(lists => BoardActions.loadBoardListsSuccess({ lists })),\r\n                    catchError(error => of(BoardActions.loadBoardListsFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    updateCard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.updateCard),\r\n            exhaustMap(action =>\r\n                this.cardsService.updateCard(action.card, action.card.id).pipe(\r\n                    switchMap(updatedCard => [\r\n                        BoardActions.updateCardSuccess({ card: action.card }),\r\n                        BoardActions.loadBoardLists({ boardId: action.card.boardId })\r\n                    ]),\r\n                    catchError(error => of(BoardActions.updateCardFailure({\r\n                        error: error.message\r\n                    })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n    \r\n    updateList$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.updateList),\r\n            exhaustMap(action =>\r\n                this.listService.updateList(action.list).pipe(\r\n                    switchMap(updatedList => [\r\n                        BoardActions.updateListSuccess({ list: action.list }),\r\n                        BoardActions.loadBoardLists({ boardId: action.list.boardId })\r\n                    ]),\r\n                    catchError(error => of(BoardActions.updateListFailure({\r\n                        error: error.message\r\n                    })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    constructor(private actions$: Actions, \r\n        private boardsService: BoardService,\r\n        private listService: ListService,\r\n        private cardsService: CardService) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 138,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardService",
            "id": "injectable-BoardService-914345171a57bf77e0400cdcd07de3f0db793b4dc76895bf9b8114800b30bb4ac1590eb245fc04a23fbb7adc00436d23a78697e4485a5556e5d071cb9ac3b522",
            "file": "src/app/_services/board.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "addBoard",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Board>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoards",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Board[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Board>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, catchError, map, take } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { Board } from '../_models/board';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BoardService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  baseUrl = environment.apiUrl;\r\n\r\n  getBoards() : Observable<Board[]> {\r\n    return this.http.get<Board[]>(`${this.baseUrl}/Board`);\r\n  }\r\n\r\n  getById(boardId: string) : Observable<Board> {\r\n    return this.http.get<Board>(`${this.baseUrl}/Board/${boardId}`);\r\n  }\r\n\r\n  addBoard(title: string): Observable<Board> {;\r\n    return this.http.post<Board>(this.baseUrl + `/Board/${title}`, title).pipe(\r\n      map(board => {\r\n        return board;\r\n      })\r\n    );\r\n  }\r\n\r\n  updateBoard(board: Board){\r\n    return this.http.patch(`${this.baseUrl}/Board/${board.id}`, board);\r\n  }\r\n\r\n  deleteBoard(boardId: string){\r\n    return this.http.delete(`${this.baseUrl}/Board/${boardId}`);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CardService",
            "id": "injectable-CardService-48124351ee5c1457ce2e0eec2af2e847534f27f7888010501e1d3e40a3d5d78c311cd7e77318da61386322db9ddb89b3728e3efd2c0d0967e5e9163d16130fc9",
            "file": "src/app/_services/card.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "addCard",
                    "args": [
                        {
                            "name": "cardDto",
                            "type": "CardDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardDto",
                            "type": "CardDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "cardDto",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardDto",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment.development';\nimport { CardDto } from '../_models/cardDto';\nimport { Card } from '../_models/card';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CardService {\n\n  constructor(private http: HttpClient) { }\n  baseUrl = environment.apiUrl;\n  \n  addCard(cardDto: CardDto){\n    return this.http.post(`${this.baseUrl}/Card`, cardDto);\n  }\n\n  updateCard(cardDto: Card, cardId: string){\n    return this.http.patch(`${this.baseUrl}/Card/${cardId}`, cardDto);\n  }\n\n  deleteCard(cardId: string){\n    return this.http.delete(`${this.baseUrl}/Card/${cardId}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListService",
            "id": "injectable-ListService-ab9cbd14e8271a4a320fc8eb7d73da4d15213d269e9207962e2bbbf7e408c568e10204be1a0c7339ae4289647867cb92e84c62a603216149b33d834cdb6da85b",
            "file": "src/app/_services/list.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "addList",
                    "args": [
                        {
                            "name": "list",
                            "type": "AddListModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "AddListModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteList",
                    "args": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<List>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListsByBoardId",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<List[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { AddListModel } from '../_models/addListModel';\r\nimport { List } from '../_models/list';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ListService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  baseUrl = environment.apiUrl;\r\n\r\n  getListsByBoardId(boardId: string) : Observable<List[]> {\r\n    return this.http.get<List[]>(`${this.baseUrl}/BoardList/board/${boardId}`);\r\n  }\r\n\r\n  getById(listId: string) : Observable<List> {\r\n    return this.http.get<List>(`${this.baseUrl}/BoardList/${listId}`);\r\n  }\r\n  \r\n  addList(list: AddListModel){\r\n    return this.http.post(`${this.baseUrl}/BoardList`, list);\r\n  }\r\n\r\n  updateList(list: List){\r\n    return this.http.patch(`${this.baseUrl}/BoardList/${list.id}`, list);\r\n  }\r\n\r\n  deleteList(listId: string){\r\n    return this.http.delete(`${this.baseUrl}/BoardList/${listId}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ServicesboardService",
            "id": "injectable-ServicesboardService-8d17ca3802358e7c272351897da46f0efd9bdd365859d6cf073dce9b6bdbfc8c0301dda55097efb14d906e3b6981cdc76e6ce4efbd71262507d67ef12cba42f2",
            "file": "src/app/-servicesboard.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServicesboardService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AddListModel",
            "id": "class-AddListModel-63888e5eabfcb7f1243301e06fa78a442e653321d5298e3912f2d8a1a6f7d96cbd0fd3f22b2580e9af464513d641d2fcfce597c82653d132a330f42036e2db1a",
            "file": "src/app/_models/addListModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class AddListModel{\r\n    name:string;\r\n    boardId: string;\r\n    constructor(\r\n        name:string,\r\n        boardId: string){\r\n        this.name = name;\r\n        this.boardId = boardId;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActivityComponent",
            "id": "component-ActivityComponent-fbc37ec0671e0b45e3173891a6a6b3f7828dbb4423c42104d84f0ad76e7b1aba75ce76537def8ca5b58f0dfbb2db7cf0cae8ed34205568a0e22ad97b3a4808fc",
            "file": "src/app/activity/activity.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity",
            "styleUrls": [
                "./activity.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./activity.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "activityLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "ActivityLog",
                    "decorators": []
                },
                {
                    "name": "cardName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ActivityLog } from '../_models/activityLog';\n\n@Component({\n  selector: 'app-activity',\n  templateUrl: './activity.component.html',\n  styleUrls: ['./activity.component.css']\n})\nexport class ActivityComponent implements OnInit {\n  @Input() activityLog?: ActivityLog;\n  @Input() cardName?:string;\n\n  ngOnInit(): void {\n    if(!this.cardName)\n      this.cardName = 'this card';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container{\r\n    display: grid;\r\n    grid-template-columns: 2fr 1fr;\r\n    gap: 10px;\r\n}\r\n.activity-message{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.activity-timestamp{\r\n    font-style: italic;\r\n}\r\n.icon{\r\n    margin-top: 8px;\r\n    margin-left: 6px;\r\n    margin-right: 0px;\r\n    font-size: 0.73em;\r\n    vertical-align: middle;\r\n}",
                    "styleUrl": "./activity.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"activityLog\" class=\"grid-container\">\n    <div class=\"activity-message\">\n        <div style=\"grid-column: 1; color: gray;\" *ngIf=\"activityLog.action === 'You added'\">\n            {{activityLog.action}} <mat-icon class=\"icon\">adjust</mat-icon><b>{{cardName}}</b>  to  <b>{{activityLog.after}}</b>\n        </div>\n        <div style=\"grid-column: 1; color: gray;\" *ngIf=\"activityLog.action === 'You deleted'\">\n            {{activityLog.action}} <mat-icon class=\"icon\">adjust</mat-icon><b>{{cardName}}</b>\n        </div>\n        <div style=\"grid-column: 1; color: gray;\" *ngIf=\"activityLog.action === 'You renamed'\"> \n            <p>{{activityLog.action}} <mat-icon class=\"icon\">adjust</mat-icon><b>{{cardName}}</b>  \n            from  <b>{{activityLog.before}}</b>  to  <b>{{activityLog.after}}</b></p>\n        </div>\n        <div style=\"grid-column: 1; color: gray;\" *ngIf=\"activityLog.action === 'You changed Due Date'  \n        || activityLog.action === 'You changed priority'\n        || activityLog.action === 'You changed Description'\"> \n            <p> {{activityLog.action}}  from  <b>{{activityLog.before}}</b>  to  <b>{{activityLog.after}}</b>\n            <p *ngIf=\"cardName != 'this card'\">  at  <mat-icon class=\"icon\">adjust</mat-icon><b>{{cardName}}</b></p>\n        </div>\n        <div style=\"grid-column: 1; color: gray;\" *ngIf=\"activityLog.action === 'You moved'\"> \n            {{activityLog.action}} <mat-icon class=\"icon\">adjust</mat-icon><b>{{cardName}}</b> \n             from  <b>{{activityLog.before}}</b>  to  <b>{{activityLog.after}}</b>\n        </div>\n    </div>\n    <div class=\"activity-timestamp\">\n        <p>{{ activityLog.timestamp | date: 'MMM d, h:mm a' }}</p>\n    </div>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-69a2cb9ab78d08648a4d43f4cdeea4e55ae6b399b0db4044e334209f2a66152c556e3d6db92afc67b6a026a3db2f8f9d6956f71e1f551b755e5f37f4d6bf8012",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "boards$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Board[]>",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currentBoard$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Board | undefined>",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currentBoardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "newBoardTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "title",
                    "defaultValue": "'My Task Boards'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBoardDeleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBoardSelected",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleActivityMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\nimport * as BoardActions from './store/actions/boards.actions';\r\nimport { Board } from './_models/board';\r\nimport { Observable, map, take } from 'rxjs';\r\nimport { boardsSelector, currentBoardSelector } from './store/selectors/selectors';\r\nimport { AppState } from './store/appSate';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  boards$?: Observable<Board[]>;\r\n  currentBoard$?: Observable<Board | undefined>;\r\n  currentBoardId?: string;\r\n  title = 'My Task Boards';\r\n  activityMenuOpen: boolean = false;\r\n  newBoardTitle: string = '';\r\n\r\n  constructor(private store: Store<AppState>) {}\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.store.dispatch(BoardActions.loadBoards());\r\n    this.boards$ = this.store.pipe(select(boardsSelector));\r\n    const storedBoardId = localStorage.getItem('currentBoardId');\r\n    if (storedBoardId) {\r\n      this.store.dispatch(BoardActions.selectBoard({ boardId: storedBoardId }));\r\n    }\r\n    this.currentBoard$ = this.store.pipe(select(currentBoardSelector));\r\n  }\r\n\r\n  toggleActivityMenu() {\r\n    this.activityMenuOpen = !this.activityMenuOpen;\r\n  }\r\n\r\n  onBoardSelected(boardId: string) {\r\n    localStorage.setItem('currentBoardId', boardId);\r\n    this.store.dispatch(BoardActions.selectBoard({ boardId }));\r\n    this.currentBoard$?.subscribe(board => this.currentBoardId = board?.id);\r\n    this.store.subscribe(store => this.currentBoardId = store.boards.currentBoard?.id).unsubscribe;\r\n  }\r\n\r\n  onBoardDeleted() {\r\n    if(this.currentBoard$){\r\n      this.currentBoard$.pipe(\r\n        take(1),\r\n        map(currentBoard => {\r\n            if (currentBoard && currentBoard.id) {\r\n                this.store.dispatch(BoardActions.deleteBoard({ boardId: currentBoard.id }));\r\n                localStorage.removeItem('currentBoardId');\r\n            }\r\n        })\r\n    ).subscribe();\r\n    }\r\n  }\r\n\r\n  closeSidebar() {\r\n    this.activityMenuOpen = false;\r\n  }\r\n\r\n  addBoard() {\r\n    if (this.newBoardTitle) {\r\n        this.store.dispatch(BoardActions.addBoard({ title: this.newBoardTitle }));\r\n        this.newBoardTitle = '';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.activity-menu {\r\n    width: 300px;\r\n    height: 100%;\r\n    background-color: #f0f0f0;\r\n    position: fixed;\r\n    top: 0;\r\n    right: -300px;\r\n    transition: right 0.3s ease;\r\n  }\r\n  \r\n.activity-menu.active {\r\n    right: 0;\r\n  }\r\n\r\n  .overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 999;\r\n  }\r\n\r\n  .form-container {\r\n    margin-top: auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .add-board-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    padding: 20px;\r\n    border-radius: 5px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .list-input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    border-radius: 5px;\r\n    border: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  .button-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  .add-button {\r\n    width: 100%;\r\n    margin-top: 5px;\r\n    margin-right: 5px;\r\n    background-color: gray;\r\n    color: white;\r\n    padding: 6px;\r\n    border: 0px;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .save-button:hover {\r\n    background-color: #3e8e41;\r\n  }\r\n\r\n  \r\n  \r\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- AppComponent Template -->\r\n<app-header \r\n    [currentBoardId]=\"(currentBoard$ | async)?.id\" \r\n    (toggleActivityMenu)=\"toggleActivityMenu()\"\r\n    (boardSelected)=\"onBoardSelected($event)\"\r\n    (boardDeleted)=\"onBoardDeleted()\">\r\n</app-header>\r\n\r\n<app-history-sidebar \r\n    *ngIf=\"activityMenuOpen\" \r\n    (closeSidebar)=\"closeSidebar()\" >\r\n</app-history-sidebar>\r\n\r\n<app-board \r\n  *ngIf=\"currentBoard$ | async as currentBoard\">\r\n</app-board>\r\n\r\n<div *ngIf=\"!(currentBoard$ | async)\" class=\"form-container\">\r\n    <div class=\"add-board-form\">\r\n        <h1>Add new Board</h1>\r\n        <h4>or</h4>\r\n        <h4 class=\"heading-secondary\" style=\"margin-bottom: 40px;\">Select existing above</h4>\r\n        <input type=\"text\" [(ngModel)]=\"newBoardTitle\" class=\"list-input\" placeholder=\"Enter new board name\">\r\n        <button class=\"add-button\" (click)=\"addBoard()\">Add Board</button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"overlay\" *ngIf=\"activityMenuOpen\" (click)=\"closeSidebar()\"></div>\r\n"
        },
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-ae9d2e301cbc72c4aa9a630864bad98f8bd91baf8d79a97169dfc6a526f2528a676edc05ccca02fd356a8afe7ccf00890e8c228565dc9ac49109b43dca141dc8",
            "file": "src/app/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board",
            "styleUrls": [
                "./board.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addingList",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "board$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Board | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lists$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "newListTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "addList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelAddList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAddingList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Board } from '../_models/board';\r\nimport { List } from '../_models/list';\r\nimport * as BoardActions from '../store/actions/boards.actions';\r\nimport { ListService } from '../_services/list.service';\r\nimport { currentBoardListsSelector, currentBoardSelector } from '../store/selectors/selectors';\r\nimport { AddListModel } from '../_models/addListModel';\r\nimport { AppState } from '../store/appSate';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.css']\r\n})\r\nexport class BoardComponent implements OnInit {\r\n  board$: Observable<Board | undefined>;\r\n  lists$: Observable<List[] | undefined>;\r\n  addingList: boolean = false;\r\n  newListTitle: string = '';\r\n\r\n  constructor(\r\n    private store: Store<AppState>,\r\n    private listService: ListService\r\n  ) {\r\n    this.board$ = this.store.pipe(select(currentBoardSelector));\r\n    this.lists$ = this.store.pipe(select(currentBoardListsSelector));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.board$.subscribe(board => {\r\n      if (board) {\r\n        this.store.dispatch(BoardActions.loadBoardLists({ boardId: board.id }));\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleAddingList() {\r\n    this.addingList = !this.addingList;\r\n    if (!this.addingList) {\r\n      this.newListTitle = '';\r\n    }\r\n  }\r\n\r\n  addList() {\r\n    this.board$.subscribe(board => {\r\n      if (board && this.newListTitle) {\r\n        this.listService.addList(new AddListModel(this.newListTitle, board.id)).subscribe({\r\n          next: () => {\r\n            this.store.dispatch(BoardActions.loadBoardLists({ boardId: board.id }));\r\n            this.newListTitle = '';\r\n            this.addingList = false;\r\n          },\r\n          error: error => console.log(error)\r\n        });\r\n      }\r\n    }).unsubscribe();\r\n  }\r\n\r\n  cancelAddList() {\r\n    this.newListTitle = '';\r\n    this.addingList = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".board-container{\r\n    padding-right: 20px;\r\n    padding-left: 20px;\r\n    overflow-x: auto;\r\n}\r\n\r\n.list-header {\r\n    display: flex;\r\n    border-top: solid #a8a8a8 2px;\r\n    border-bottom: solid #a8a8a8 2px;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.list-placeholder{\r\n    flex: 1;\r\n    min-width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 20px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n}\r\n\r\n.list-placeholder h4 {\r\n    margin: 0;\r\n}\r\n\r\n.horizontal-list {\r\n    display: flex;\r\n    flex-wrap: nowrap; \r\n    overflow-x: auto;\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.horizontal-list .list-placeholder {\r\n    flex: 0 0 auto;\r\n}\r\n\r\n.add-list-form {\r\n    min-width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n}\r\n\r\n.list-input {\r\n    width: calc(100% - 20px); /* Adjust as needed */\r\n    margin-top: 0px;\r\n    margin-bottom: 10px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    padding: 8px;\r\n    border-radius: 5px;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.button-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 10px;\r\n}\r\n\r\n.add-button{\r\n    flex-grow: 1;\r\n    margin-top: 5px;\r\n    margin-right: 5px;\r\n    background-color: gray;\r\n    color: white;\r\n    padding: 4px;\r\n    border: 0px;\r\n    border-radius: 5px;\r\n}\r\n.cancel-button {\r\n    flex-grow: 1;\r\n    padding: 4px;\r\n    margin-top: 5px;\r\n    margin-left: 5px;\r\n    background-color: rgb(255, 255, 255);\r\n    border: 2px solid rgb(216, 216, 216);\r\n    border-radius: 5px;\r\n}",
                    "styleUrl": "./board.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"board-container\">\r\n    <ul class=\"horizontal-list\" style=\"float:inline-start; position: relative;\">\r\n        <ng-container *ngFor=\"let list of lists$ | async \">\r\n            <app-list [list]=\"list\"></app-list>\r\n        </ng-container>\r\n        <div class=\"list-placeholder\" *ngIf=\"!addingList; else addListForm\">\r\n            <div class=\"list-header\">\r\n                <h4>Add another list</h4>\r\n                <button mat-icon-button aria-label=\"Add List\" (click)=\"toggleAddingList()\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <ng-template #addListForm>\r\n            <div class=\"add-list-form\">\r\n                <input type=\"text\" [(ngModel)]=\"newListTitle\" placeholder=\"Enter list title\" class=\"list-input\">\r\n                <div class=\"button-container\">\r\n                    <button (click)=\"addList()\" class=\"add-button\">Add List</button>\r\n                    <button (click)=\"cancelAddList()\" class=\"cancel-button\">Cancel</button>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </ul>\r\n</div>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-1c7b0e1e7219b6f20008a5a7a556420054ec512daedfb5978942c00f6498a918c666eb18f10f4841e6df9947af7139f28dcf0906bbbb2c56f6d8180fabf1b9a1",
            "file": "src/app/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Card | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "editCardClicked",
                    "defaultValue": "new EventEmitter<Card>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<Card>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cardService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lists$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "listService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedOption",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPriorityCaption",
                    "args": [
                        {
                            "name": "priority",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openCardDetailsModal",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Card } from '../_models/card';\r\nimport { CardDetailsModalComponent } from '../card-details-modal/card-details-modal.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { List } from '../_models/list';\r\nimport { CardService } from '../_services/card.service';\r\nimport * as BoardActions from '../store/actions/boards.actions';\r\nimport { ListService } from '../_services/list.service';\r\nimport { Observable } from 'rxjs';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../store/appSate';\r\nimport { currentBoardListsSelector } from '../store/selectors/selectors';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.css']\r\n})\r\nexport class CardComponent implements OnInit{\r\n  @Input() card: Card | undefined;\r\n  @Output() editCardClicked: EventEmitter<Card> = new EventEmitter<Card>();\r\n  lists$: Observable<List[] | undefined>;\r\n\r\n  selectedOption: string = ''; \r\n\r\n  constructor(public dialog: MatDialog,\r\n    private store: Store<AppState>, \r\n    public listService: ListService, \r\n    public cardService: CardService){\r\n      this.lists$ = this.store.pipe(select(currentBoardListsSelector));\r\n    }\r\n\r\n  ngOnInit(): void {\r\n    if (this.card) {\r\n    }\r\n  }\r\n\r\n  editCard() {\r\n    this.editCardClicked.emit(this.card);\r\n  }\r\n\r\n  deleteCard() {\r\n    if(this.card)\r\n    this.cardService.deleteCard(this.card.id).subscribe({\r\n      next: () => this.card = undefined\r\n    });\r\n  }\r\n\r\n  updateCard(listId: string){\r\n    if (this.card) {\r\n      const updatedCard = { ...this.card, boardListId: listId };\r\n      this.store.dispatch(BoardActions.updateCard({ card: updatedCard }));\r\n    }\r\n  }\r\n\r\n  openCardDetailsModal(card: Card) {\r\n    this.dialog.open(CardDetailsModalComponent, { data: { listId: card.boardId ,card: card } });\r\n  }\r\n  \r\n  getPriorityCaption(priority: number): string {\r\n    switch (priority) {\r\n      case 0:\r\n        return 'Low';\r\n      case 1:\r\n        return 'Medium';\r\n      case 2:\r\n        return 'High';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.dropdown-menu {\r\n    margin-left: 10px;\r\n}\r\n\r\n.card {\r\n    border: 3px solid rgb(209, 209, 209);\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    margin-bottom: 20px;\r\n    padding: 10px;\r\n    width: 280px;\r\n}\r\n\r\n.card-header {\r\n    padding: 10px;\r\n    display: flex;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    border: white;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.card-content {\r\n    padding: 10px;\r\n}\r\n\r\n.mat-menu-item {\r\n    cursor: pointer;\r\n}\r\n\r\n.priority-badge {\r\n    display: inline-block;\r\n    margin-bottom: 5%;\r\n    margin-top: 5%;\r\n    padding: 4px 8px;\r\n    border-radius: 15px;\r\n    color:rgb(85, 85, 85);\r\n    font-size: small;\r\n    background-color: rgb(236, 236, 236);\r\n  }\r\n\r\n.priority-badge::before {\r\n    content: '';\r\n    display: inline-block;\r\n    width: 8px; \r\n    height: 8px; \r\n    background-color: rgb(85, 85, 85);\r\n    border-radius: 50%;\r\n    margin-right: 5px;\r\n  }\r\n\r\n.move-to-button{\r\n    padding: 8px 15px 8px 15px;\r\n    width: 100%; \r\n    background-color: #f0f0f0; \r\n    border: 0px; \r\n    border-radius: 5px; \r\n    color: black; \r\n    display: flex; \r\n    flex-direction: row; \r\n    justify-content: space-between;\r\n}\r\n",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"card\" class=\"card\">\r\n    <div class=\"card-header\" style=\"padding: 10px; display: flex; justify-content: space-between; align-items: center;\">\r\n        <a style=\"margin: 0; color: black; font-size: 26px;\"  (click)=\"openCardDetailsModal(card)\">{{ card.name }}</a>\r\n        <button mat-icon-button [matMenuTriggerFor]=\"listMenu\" aria-label=\"Menu\" style=\"cursor: pointer;\">\r\n          <mat-icon>more_vert</mat-icon>\r\n        </button>\r\n        <mat-menu #listMenu=\"matMenu\">\r\n          <button mat-menu-item (click)=\"editCard()\"><mat-icon>create</mat-icon> Edit</button>\r\n          <button mat-menu-item (click)=\"deleteCard()\" style=\"color: red\"><mat-icon style=\"color: red\">delete_outline</mat-icon> Delete</button>\r\n        </mat-menu>\r\n    </div>\r\n    <div class=\"card-content\" style=\"padding: 10px;\">\r\n        <p style=\"text-wrap: wrap;\">{{ card.description }}</p>\r\n        <div style=\"display: flex; align-items: center;\">\r\n            <mat-icon style=\"margin-right: 5px;\">event</mat-icon>\r\n            <p style=\"margin-top: 15px; margin-left: 10px;\">{{ card.dueDate | date: 'MMM d' }}</p>\r\n        </div>\r\n        <div class=\"priority-badge\">\r\n            <span>{{ getPriorityCaption(card.priority) }}</span>\r\n        </div>\r\n        <button class=\"move-to-button\" [matMenuTriggerFor]=\"moveToMenu\">\r\n          Move to \r\n          <mat-icon style=\"margin-left: auto;\">keyboard_arrow_down</mat-icon>\r\n          </button>      \r\n          <mat-menu #moveToMenu=\"matMenu\">\r\n            <button mat-menu-item *ngFor=\"let list of lists$ | async\" (click)=\"updateCard(list.id)\" >{{list.name}}</button>\r\n          </mat-menu>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "CardDetailsModalComponent",
            "id": "component-CardDetailsModalComponent-824b4faaf52ac2fd03df732e9bcf585c9e45b5e66152c74203f29b47838550ae700bcdf1323d2cdb1ccec93489b07b694ca2ea1897cda6ea033e4f9833b5bcbd",
            "file": "src/app/card-details-modal/card-details-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-details-modal",
            "styleUrls": [
                "./card-details-modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-details-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "editCardClicked",
                    "defaultValue": "new EventEmitter<Card>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<Card>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activityLogs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivityLog[]",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "cardName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "cardService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardService",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CardDetailsModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "List[]",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedPriority",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPriorityCaption",
                    "args": [
                        {
                            "name": "priority",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadActivityLogs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditCardModal",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\r\nimport { List } from '../_models/list';\r\nimport { Card } from '../_models/card';\r\nimport * as BoardActions from '../store/actions/boards.actions';\r\nimport { ActivityService } from '../_services/activity.service';\r\nimport { ActivityLog } from '../_models/activityLog';\r\nimport { CardService } from '../_services/card.service';\r\nimport { CardModalComponent } from '../card-modal/card-modal.component';\r\nimport { ListService } from '../_services/list.service';\r\nimport { AppState } from '../store/appSate';\r\nimport { Store } from '@ngrx/store';\r\n\r\n\r\n@Component({\r\n  selector: 'app-card-details-modal',\r\n  templateUrl: './card-details-modal.component.html',\r\n  styleUrls: ['./card-details-modal.component.css']\r\n})\r\nexport class CardDetailsModalComponent implements OnInit {\r\n  @Output() editCardClicked: EventEmitter<Card> = new EventEmitter<Card>();\r\n  card?: Card;\r\n  lists?: List[];\r\n  activityLogs?: ActivityLog[];\r\n  cardName = '';\r\n  selectedList?: string;\r\n  dueDate?: Date;\r\n  selectedPriority= '';\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<CardDetailsModalComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private listService: ListService,\r\n    private activityService: ActivityService,\r\n    public cardService: CardService,\r\n    public dialog: MatDialog,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.card = this.data.card;\r\n    this.loadLists();\r\n    this.loadActivityLogs();\r\n    if(this.card){\r\n      this.selectedList = this.card.boardListId;\r\n      this.selectedPriority = this.getPriorityCaption(this.card.priority);\r\n    }\r\n  }\r\n\r\n  editCard() {\r\n    if(this.card)\r\n    this.openEditCardModal(this.card);\r\n    this.close();\r\n  }\r\n\r\n  updateCard(listId: string){\r\n    if (this.card) {\r\n      const updatedCard = { ...this.card, boardListId: listId };\r\n      this.store.dispatch(BoardActions.updateCard({ card: updatedCard }));\r\n    }\r\n  }\r\n\r\n  loadLists(){\r\n    if(this.card)\r\n    this.listService.getListsByBoardId(this.card.boardId).subscribe(lists => this.lists = lists)\r\n  }\r\n\r\n  loadActivityLogs(){\r\n    if(this.card)\r\n      this.activityService.getByCardId(this.card.id).subscribe({\r\n    next: activityLogs => this.activityLogs = activityLogs,\r\n    error: error => console.log(this.activityLogs)\r\n    });\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  getPriorityCaption(priority: number): string {\r\n    switch (priority) {\r\n      case 0:\r\n        return 'Low';\r\n      case 1:\r\n        return 'Medium';\r\n      case 2:\r\n        return 'High';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  openEditCardModal(card: Card) {\r\n    this.dialog.open(CardModalComponent, {\r\n      data: {listId: card.boardListId, card: card }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".select{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.description{\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.description-input{\r\n    display: flex;\r\n}\r\n\r\n.header{\r\n    display: flex;\r\n    flex-direction: row;\r\n    grid-column: 1;\r\n    column-span: 3;\r\n    background-color: gray;\r\n    min-height: 40px;\r\n    width: 950px;\r\n}\r\n\r\n.grid-container {\r\n    width: 950px;\r\n    height: 600px;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1.5fr;\r\n  }\r\n\r\n.labels {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n.label-item{\r\n    display: flex;\r\n    margin: 10px;\r\n    flex-direction: row;\r\n}\r\n\r\n.inputs {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n.due-date {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n.description {\r\n    grid-column: 1 / span 2;\r\n  }\r\n\r\n.form{\r\n    padding: 30px;\r\n}\r\n\r\n.div-form{\r\n    min-width: 600px;\r\n}\r\n\r\n.button-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 0 10px;\r\n}\r\n\r\n.edit-button {\r\n    display: inline;\r\n    grid-column: 2;\r\n    justify-content: center;\r\n    height: 40px;\r\n    width: 100px;\r\n    padding: 4px;\r\n    background-color: rgb(255, 255, 255);\r\n    border: 2px solid rgb(216, 216, 216);\r\n    border-radius: 5px;\r\n}\r\n\r\n.card-name{\r\n    grid-column: 1;\r\n    column-span: 2;\r\n}\r\n\r\n.activity-panel {\r\n    grid-column: 3;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    height: 600px;\r\n    margin: 0px; \r\n    padding: 10px;\r\n    grid-row: 1 / span 3;\r\n    background-color: rgb(218, 218, 218);\r\n    overflow-y: scroll;\r\n}\r\n\r\n.activity-list {\r\n    margin-left: 10px;\r\n    max-height: 920px;\r\n  }\r\n  \r\n.details{\r\n    margin: 30px;\r\n    grid-column: 1 / span 2;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr;\r\n}\r\n\r\n.icon{\r\n    margin-top: 5px;\r\n    margin-bottom: auto;\r\n    font-size: 1.2em;\r\n    vertical-align: middle;\r\n}",
                    "styleUrl": "./card-details-modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CardDetailsModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CardDetailsModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\">\n    <button mat-icon-button class=\"close-button\" (click)=\"close()\">\n        <mat-icon>close</mat-icon>\n    </button>\n</div>\n<div class=\"grid-container\">\n    <div class=\"details\">\n        <h4 style=\"grid-column: 1;\">{{card?.name}}</h4>\n        <button class=\"edit-button\" (click)=\"editCard()\">\n            <mat-icon class=\"icon\" style=\"margin-right: 5px; \">edit</mat-icon> Edit\n        </button>\n    <div class=\"labels\" style=\"grid-column: 1;\">\n        <div class=\"label-item\">\n            <mat-icon class=\"label-icon\">list</mat-icon>\n            <p style=\"margin-left: 5px;\">List</p>\n        </div>\n        <div class=\"label-item\">\n            <mat-icon class=\"label-icon\">calendar_today</mat-icon>\n            <p style=\"margin-left: 5px;\">Due Date</p>\n        </div>\n        <div class=\"label-item\">\n            <mat-icon class=\"label-icon\">label</mat-icon>\n            <p style=\"margin-left: 5px;\">Priority</p>\n        </div>\n    </div>\n    <div style=\"grid-column: 2;\">\n        <form #cardDetailsForm=\"ngForm\">\n            <div class=\"select\">\n                <mat-form-field style=\"height: 50px; display: inline;\">\n                    <mat-select [(ngModel)]=\"selectedList\" name=\"selectedList\">\n                        <mat-option *ngFor=\"let list of lists\" [value]=\"list.id\" (click)=\"updateCard(list.id)\">{{ list.name }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n        <div style=\"display: flex; align-items: center; height: 50px;\">\n            <p style=\"margin-top: 30px;\">{{ this.card?.dueDate | date: 'MMM d'}}</p>\n        </div>\n        <div style=\"height: 50px; margin-top: 30px;\">\n            <p>{{selectedPriority}}</p>\n        </div>\n    </div>\n    <div class=\"description\" style=\"grid-column: 1 / span 2;\">\n        <h4>Description</h4>\n        <p>{{card?.description}}</p>\n    </div>  \n    </div>\n    <div class=\"activity-panel\">\n        <h3>Activity</h3>\n        <div class=\"activity-list\" style=\"padding: 10px;\">\n            <ng-container *ngFor=\"let activity of activityLogs\">\n                <ul>\n                    <li>\n                        <app-activity [activityLog]=\"activity\"></app-activity>\n                    </li>\n                </ul>    \n            </ng-container>\n        </div>\n    </div> \n</div>"
        },
        {
            "name": "CardModalComponent",
            "id": "component-CardModalComponent-341eea78e92cc608ba189ca3ed0ebfc1fd24b2d959f7590eb265eec1d6d9a4e997ed05b46a629f1a59f6dd95439327c774f8f882b466e26421d35e7be083e0ed",
            "file": "src/app/card-modal/card-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-modal",
            "styleUrls": [
                "./card-modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cardForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CardModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isEditing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "List[]",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "priorities",
                    "defaultValue": "['Low', 'Medium', 'High']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "addCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPriorityCaption",
                    "args": [
                        {
                            "name": "priority",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadLists",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDatePicker",
                    "args": [
                        {
                            "name": "datePicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "datePicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatDatepicker } from '@angular/material/datepicker';\r\nimport { List } from '../_models/list';\r\nimport { Card } from '../_models/card';\r\nimport { CardService } from '../_services/card.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CardDto } from '../_models/cardDto';\r\nimport * as BoardActions from '../store/actions/boards.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { ListService } from '../_services/list.service';\r\n\r\n@Component({\r\n  selector: 'app-card-modal',\r\n  templateUrl: './card-modal.component.html',\r\n  styleUrls: ['./card-modal.component.css']\r\n})\r\nexport class CardModalComponent implements OnInit {\r\n  card?: Card;\r\n  lists?: List[];\r\n  boardId = '';\r\n  priorities = ['Low', 'Medium', 'High'];\r\n  cardForm: FormGroup = new FormGroup({});\r\n  isEditing: boolean = false;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<CardModalComponent>, \r\n    private listService: ListService,\r\n    private cardService: CardService,\r\n    private store: Store,\r\n    private fb: FormBuilder,\r\n    @Inject(MAT_DIALOG_DATA) public data: { listId: string, card?: Card }\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createForm();\r\n    this.loadList();\r\n    \r\n    if (this.data && this.data.card) {\r\n      this.card = this.data.card;\r\n      this.isEditing = true;\r\n      this.cardForm.patchValue({\r\n        name: this.data.card.name,\r\n        description: this.data.card.description,\r\n        dueDate: this.data.card.dueDate,\r\n        priority: this.getPriorityCaption(this.data.card.priority),\r\n        boardListId: this.data.card.boardListId,\r\n        boardId: this.data.card.boardId\r\n      });\r\n    }\r\n    if (this.data.listId) {\r\n      this.cardForm.patchValue({\r\n        boardListId: this.data.listId\r\n      });\r\n    }\r\n  }\r\n  \r\n  createForm() {\r\n    this.cardForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      description: [''],\r\n      dueDate: [new Date()],\r\n      priority: ['', Validators.required],\r\n      boardListId: ['', Validators.required]\r\n    });\r\n  }\r\n  \r\n  close(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  loadList() {\r\n    if(this.data.listId){\r\n      this.listService.getById(this.data.listId).subscribe({\r\n        next: list => this.loadLists(list.boardId),\r\n        error: error => console.error(error)\r\n      });\r\n    }\r\n  }\r\n\r\n  loadLists(boardId: string) {\r\n    if(boardId){\r\n      this.listService.getListsByBoardId(boardId).subscribe({\r\n        next: lists => this.lists = lists,\r\n        error: error => console.error(error)\r\n      });\r\n    }\r\n  }\r\n\r\n  openDatePicker(datePicker: MatDatepicker<Date>) {\r\n    datePicker.open();\r\n  }\r\n\r\n  addCard(): void {\r\n    if (this.cardForm) {\r\n      if (this.cardForm.valid && this.lists) {\r\n        const cardDto: CardDto = {\r\n          name: this.cardForm.value.name,\r\n          description: this.cardForm.value.description,\r\n          dueDate: this.cardForm.value.dueDate,\r\n          priority: this.priorities.indexOf(this.cardForm.value.priority),\r\n          boardListId: this.cardForm.value.boardListId,\r\n          boardId: this.lists[0].boardId,\r\n        };\r\n        this.cardService.addCard(cardDto).subscribe(() => {\r\n          this.reload();\r\n          this.dialogRef.close();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  updateCard(): void {\r\n    if (this.cardForm) {\r\n      if (this.card && this.cardForm.valid && this.lists) {\r\n        const cardDto: Card = {\r\n          id: this.card.id,\r\n          name: this.cardForm.value.name,\r\n          description: this.cardForm.value.description,\r\n          dueDate: this.cardForm.value.dueDate,\r\n          priority: this.priorities.indexOf(this.cardForm.value.priority),\r\n          boardListId: this.cardForm.value.boardListId,\r\n          boardId: this.lists[0].boardId,\r\n        };\r\n        this.cardService.updateCard(cardDto, cardDto.id).subscribe(() => {\r\n          this.reload();\r\n          this.dialogRef.close();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  reload(): void {\r\n    if(this.lists)\r\n    this.store.dispatch(BoardActions.loadBoardLists({boardId: this.lists[0].boardId}));\r\n  }\r\n\r\n  getPriorityCaption(priority: number): string {\r\n    switch (priority) {\r\n      case 0:\r\n        return 'Low';\r\n      case 1:\r\n        return 'Medium';\r\n      case 2:\r\n        return 'High';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".select{\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 0px;\r\n    padding: auto;\r\n}\r\n\r\n.description{\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.description-input{\r\n    display: flex;\r\n}\r\n\r\n.header{\r\n    background-color: gray;\r\n    min-height: 40px;\r\n    width: auto;\r\n}\r\n.grid-container {\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr;\r\n    gap: 10px;\r\n  }\r\n\r\n.labels {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n.label-item{\r\n    display: flex;\r\n    margin: 10px;\r\n    flex-direction: row;\r\n}\r\n\r\n.inputs {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n.due-date {\r\n    margin: 0px;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n.description {\r\n    grid-column: 1 / span 2;\r\n  }\r\n\r\n.form{\r\n    padding: 30px;\r\n}\r\n\r\n.div-form{\r\n    border-radius: 70px;\r\n    min-width: 600px;\r\n}\r\n\r\n.button-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 0 10px;\r\n}\r\n\r\n.save-button{\r\n    flex-grow: 1;\r\n    margin-top: 5px;\r\n    margin-right: 5px;\r\n    background-color: gray;\r\n    color: white;\r\n    padding: 4px;\r\n    border: 0px;\r\n    border-radius: 5px;\r\n}\r\n.cancel-button {\r\n    flex-grow: 1;\r\n    padding: 4px;\r\n    margin-top: 5px;\r\n    margin-left: 5px;\r\n    background-color: rgb(255, 255, 255);\r\n    border: 2px solid rgb(216, 216, 216);\r\n    border-radius: 5px;\r\n}\r\n\r\n.name-input {\r\n    font-size: 20px; /* Adjust the font size as needed */\r\n    border: none; /* Remove the border */\r\n    text-decoration: none; \r\n    background-color: white;/* Remove any text decoration */\r\n}",
                    "styleUrl": "./card-modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CardModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CardModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"div-form\">\n    <div class=\"header\">\n        <button mat-icon-button class=\"close-button\" (click)=\"close()\">\n            <mat-icon>close</mat-icon>\n        </button>\n    </div>\n    <form class=\"form\" [formGroup]=\"cardForm\" (ngSubmit)=\"isEditing? updateCard() : addCard()\">\n        <mat-form-field class=\"name-input\">\n            <input matInput placeholder=\"Card Name\" formControlName=\"name\" required>\n            <mat-error *ngIf=\"cardForm.controls['name'].invalid && cardForm.controls['name'].touched\">\n                Card name is required\n            </mat-error>\n        </mat-form-field>\n        <div class=\"grid-container\">\n            <div class=\"labels\">\n                <div class=\"label-item\">\n                    <mat-icon class=\"label-icon\">list</mat-icon>\n                    <p style=\"margin-left: 5px;\">List</p>\n                </div>\n                <div class=\"label-item\">\n                    <mat-icon class=\"label-icon\">calendar_today</mat-icon>\n                    <p style=\"margin-left: 5px;\">Due Date</p>\n                </div>\n                <div class=\"label-item\">\n                    <mat-icon class=\"label-icon\">label</mat-icon>\n                    <p style=\"margin-left: 5px;\">Priority</p>\n                </div>\n            </div>\n\n            <div>\n                <div class=\"select\">\n                    <mat-form-field style=\"margin-bottom: 0px;\">\n                        <mat-select formControlName=\"boardListId\" required>\n                            <mat-option *ngFor=\"let list of lists\" [value]=\"list.id\">{{ list.name }}</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"cardForm.controls['boardListId'].invalid && cardForm.controls['boardListId'].touched\">\n                            List is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"due-date\">\n                    <mat-form-field>\n                        <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\" formControlName=\"dueDate\">\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                        <mat-datepicker #picker></mat-datepicker>\n\n                    </mat-form-field>\n                </div>\n                <div class=\"priority\">\n                    <mat-form-field>\n                        <mat-select placeholder=\"Priority\" formControlName=\"priority\" required>\n                            <mat-option *ngFor=\"let priority of priorities\" [value]=\"priority\">\n                                {{ priority }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"cardForm.controls['priority'].invalid && cardForm.controls['priority'].touched\">\n                            Priority is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"description\" style=\"grid-column: 1 / span 2;\">\n                <mat-label style=\"font-size: 24;\">Description</mat-label>\n                <mat-form-field>\n                    <textarea matInput placeholder=\"Enter description\" formControlName=\"description\" required></textarea>\n                    <mat-error *ngIf=\"cardForm.controls['description'].invalid && cardForm.controls['description'].touched\">\n                        Description is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"button-container\">\n            <button class=\"save-button\" [disabled]=\"!cardForm.valid\" type=\"submit\"> {{ isEditing ? 'Save' : 'Add Card' }}</button>\n            <button class=\"cancel-button\" type=\"button\" (click)=\"close()\">Cancel</button>\n        </div>\n    </form>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-361bed67002995ea77150d65b94d608566afa3f5624665408e256a2338445d575d0779309c54efae4cde0bb4a3e9ef91b3773c40d603d0bb9196b0d4a8675eea",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentBoardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "boardSelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleActivityMenu",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addingBoard",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "boards$",
                    "defaultValue": "this.store.select(boardsSelector)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "currentBoard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "currentBoard$",
                    "defaultValue": "this.store.select(currentBoardSelector)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "editedBoardTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isBoardSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isEditing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "newBoardTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelAdding",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectBoard",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToggleActivityMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAddingBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Board } from '../_models/board';\r\nimport * as BoardActions from '../store/actions/boards.actions';\r\nimport { boardsSelector, currentBoardSelector } from '../store/selectors/selectors';\r\nimport { AppState } from '../store/appSate';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  @Output() toggleActivityMenu = new EventEmitter<void>();\r\n  @Output() boardSelected = new EventEmitter<string>();\r\n  @Input() currentBoardId?: string;\r\n\r\n  boards$ = this.store.select(boardsSelector);\r\n  currentBoard$ = this.store.select(currentBoardSelector);\r\n  currentBoard?: Board;\r\n  isEditing = false;\r\n  newBoardTitle: string = '';\r\n  addingBoard: boolean = false;\r\n  isBoardSelected: boolean = false;\r\n  editedBoardTitle: string = '';\r\n\r\n  constructor(private store: Store<AppState>) {}\r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(BoardActions.loadBoards());\r\n    this.store.select(currentBoardSelector).subscribe(board => {\r\n      this.currentBoard = board;\r\n      if(this.currentBoard && this.currentBoard.name){\r\n        this.isBoardSelected = true;\r\n        this.editedBoardTitle = this.currentBoard.name;\r\n      }\r\n    });\r\n  }\r\n\r\n  onToggleActivityMenu() {\r\n    this.toggleActivityMenu.emit();\r\n  }\r\n\r\n  onSelectBoard(boardId: string) {\r\n    this.store.dispatch(BoardActions.selectBoard({ boardId }));\r\n    this.boardSelected.emit(boardId);\r\n    this.isBoardSelected = true;\r\n  }\r\n\r\n  onAddBoard() {\r\n    if (this.newBoardTitle) {\r\n      this.store.dispatch(BoardActions.addBoard({ title: this.newBoardTitle }));\r\n      this.currentBoard$ = this.store.select(currentBoardSelector);\r\n      this.isBoardSelected = true;\r\n      this.newBoardTitle = '';\r\n      this.addingBoard = false;\r\n    }\r\n  }\r\n\r\n  onDeleteBoard() {\r\n    if (this.currentBoardId) {\r\n      this.isBoardSelected = false;\r\n      this.store.dispatch(BoardActions.deleteBoard({ boardId: this.currentBoardId }));\r\n      this.currentBoard = undefined;\r\n    }\r\n  }\r\n\r\n  onSaveEdit() {\r\n    if (this.currentBoard && this.editedBoardTitle.trim()) {\r\n      const updatedBoard: Board = {\r\n        ...this.currentBoard,\r\n        name: this.editedBoardTitle.trim()\r\n      };\r\n      this.store.dispatch(BoardActions.updateBoard({ board: updatedBoard }));\r\n      this.isEditing = false;\r\n    }\r\n  }\r\n\r\n  cancelEdit() {\r\n    this.isEditing = false;\r\n    if(this.currentBoard)\r\n    this.editedBoardTitle = this.currentBoard?.name;\r\n  }\r\n \r\n  cancelAdding() {\r\n    this.addingBoard = false;\r\n    this.newBoardTitle = '';\r\n  }\r\n\r\n  toggleAddingBoard() {\r\n    this.addingBoard = !this.addingBoard;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header{\r\n    margin-left: 10px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n}\r\n\r\n.history-button {\r\n    display: flex;\r\n    flex-direction: row;\r\n    vertical-align: middle;\r\n    margin-right: 20px;\r\n    min-width: 110px;\r\n    padding-top: 8px;\r\n    padding-bottom: 8px;\r\n    background-color: rgb(255, 255, 255);\r\n    border: 2px solid rgb(216, 216, 216);\r\n    border-radius: 5px;\r\n    align-items: center;\r\n}\r\n\r\n.board-input { \r\n    height: 100%;\r\n    margin-top: 0px;\r\n    margin-left: 10px;\r\n    padding: 8px;\r\n    border-radius: 5px;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.save-button{\r\n    flex-grow: 1;\r\n    width: 60px;\r\n    margin-left: 5px;\r\n    background-color: gray;\r\n    color: white;\r\n    height: 100%;\r\n    padding: 4px;\r\n    border: 0px;\r\n    border-radius: 5px;\r\n}\r\n.cancel-button {\r\n    flex-grow: 1;\r\n    padding: 4px;\r\n    margin-left: 5px;\r\n    height: 100%;\r\n    background-color: rgb(255, 255, 255);\r\n    border: 2px solid rgb(216, 216, 216);\r\n    border-radius: 5px;\r\n}\r\n\r\n.sidebar {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    height: 1;\r\n    width: 300px;\r\n    background-color: #f0f0f0;\r\n    overflow-y: auto;\r\n  }\r\n\r\n.edit-board-form{\r\n    width: 100%;\r\n}",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n    <header class=\"header\" style=\"padding: 20px;\">\r\n        <div style=\"display: flex; flex-direction: row; width: 100%;\">\r\n            <h2>My Task Boards</h2>\r\n            <button mat-icon-button (click)=\"toggleAddingBoard()\">\r\n                <mat-icon>add</mat-icon>\r\n            </button>\r\n        </div>\r\n        <div *ngIf=\"addingBoard\" class=\"edit-board-form\">\r\n            <input type=\"text\" [(ngModel)]=\"newBoardTitle\" class=\"board-input\" placeholder=\"Enter new board title\">\r\n                <button class=\"save-button\" (click)=\"onAddBoard()\">Add</button>\r\n                <button class=\"cancel-button\" (click)=\"cancelAdding()\">Cancel</button>\r\n        </div>\r\n        <mat-select style=\"font-size: 28px; width: 50%;\" *ngIf=\"!isEditing\"\r\n                (selectionChange)=\"onSelectBoard($event.value)\"\r\n                [value]=\"(currentBoard$ | async)?.id\"\r\n                placeholder=\"{{ (currentBoard$ | async)?.name || 'Select Board' }}\">\r\n            <mat-option *ngFor=\"let board of boards$ |async\" [value]=\"board.id\"> {{ board.name }}</mat-option>\r\n        </mat-select>\r\n        <div *ngIf=\"isEditing\" class=\"edit-board-form\">\r\n            <input type=\"text\" [(ngModel)]=\"editedBoardTitle\" class=\"board-input\" placeholder=\"Enter board title\">\r\n            <button class=\"save-button\" (click)=\"onSaveEdit()\">Save</button>\r\n            <button class=\"cancel-button\" (click)=\"cancelEdit()\">Cancel</button>\r\n        </div>\r\n        <button *ngIf=\"isBoardSelected\" mat-icon-button [matMenuTriggerFor]=\"boardMenu\" aria-label=\"Menu\" style=\"margin-left: 10px; margin-right: 10px;\">\r\n            <mat-icon>more_vert</mat-icon>\r\n          </button>\r\n          <mat-menu #boardMenu=\"matMenu\">\r\n            <button mat-menu-item (click)=\"isEditing = true\"><mat-icon>create</mat-icon> Edit</button>\r\n            <button mat-menu-item (click)=\"onDeleteBoard()\" style=\"color: red\"><mat-icon style=\"color: red\">delete_outline</mat-icon> Delete</button>\r\n          </mat-menu>\r\n        <button *ngIf=\"isBoardSelected\" class=\"history-button\" (click)=\"onToggleActivityMenu()\">\r\n            <mat-icon style=\"margin-right: 5px;\">history</mat-icon> History\r\n        </button>\r\n    </header>\r\n</div>"
        },
        {
            "name": "HistorySidebarComponent",
            "id": "component-HistorySidebarComponent-6d7c6b2c251dc1db7a20fa3a1b4b5dca3ada8f78587fd9265c25269ff647aa48c18f872786cba6ad24e6a232e8e4e9491dbea7053d4753c1f801ca85277325f4",
            "file": "src/app/history-sidebar/history-sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-history-sidebar",
            "styleUrls": [
                "./history-sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./history-sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeSidebar",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activityLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivityLog[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "pageNumber",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pageSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "loadActivityLogs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollToTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ActivityService } from '../_services/activity.service';\r\nimport { ActivityLog } from '../_models/activityLog';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../store/appSate';\r\n\r\n@Component({\r\n  selector: 'app-history-sidebar',\r\n  templateUrl: './history-sidebar.component.html',\r\n  styleUrls: ['./history-sidebar.component.css']\r\n})\r\nexport class HistorySidebarComponent implements OnInit{\r\n  @Output() closeSidebar: EventEmitter<void> = new EventEmitter<void>();\r\n  boardId?: string;\r\n  activityLogs: ActivityLog[] = [];\r\n  pageNumber = 1;\r\n  pageSize = 10;\r\n  \r\n  constructor(private activityService: ActivityService,\r\n    private store: Store<AppState>\r\n  ){}\r\n\r\n  ngOnInit(): void {\r\n    this.store.subscribe(store => this.boardId = store.boards.currentBoard?.id).unsubscribe;\r\n    console.log(this.boardId);\r\n    this.loadActivityLogs();\r\n  }\r\n\r\n  loadActivityLogs(){\r\n    if(this.boardId)\r\n    this.activityService.getByBoardId(this.boardId, this.pageNumber, this.pageSize).subscribe({\r\n    next: newActivityLogs => {\r\n      this.activityLogs = this.activityLogs?.concat(newActivityLogs);\r\n    },\r\n    error: error => console.log(this.activityLogs)\r\n    });\r\n  }\r\n\r\n  onCloseSidebar(){\r\n    this.closeSidebar.emit();\r\n  }\r\n\r\n  loadMore(){\r\n    this.pageNumber++;\r\n    this.loadActivityLogs();\r\n    this.scrollToTop();\r\n  }\r\n\r\n  scrollToTop(): void {\r\n    const container = document.querySelector('.activity-list');\r\n    if (container) {\r\n      container.scrollTop = 0;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidebar {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  height: 100%;\r\n  width: 450px;\r\n  background-color: #f0f0f0;\r\n  z-index: 1000;\r\n}\r\n\r\n.header {\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  background-color: rgb(95, 95, 95);\r\n  color:white;\r\n}\r\n\r\n.activity-list {\r\n  margin-left: 10px;\r\n  max-height: 920px;\r\n}\r\n\r\n.close-button{\r\n  justify-self: end;\r\n}\r\n\r\n.load-button {\r\n  width: 80%;\r\n  justify-content: center;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  vertical-align: middle;\r\n  min-width: 120px;\r\n  max-height: 50px;\r\n  margin: auto;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  background-color: rgb(255, 255, 255);\r\n  border: none;\r\n  border-radius: 5px;\r\n}",
                    "styleUrl": "./history-sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sidebar\">\n    <div class=\"header\">\n      <h3>History</h3>\n      <button mat-icon-button class=\"close-button\" (click)=\"onCloseSidebar()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <div class=\"activity-list\" style=\"padding: 10px; overflow-y: auto;\">\n      <ul>\n        <li *ngFor=\"let activity of activityLogs\" style=\"margin-top: 8px;\">\n          <app-activity  [activityLog]=\"activity\" [cardName]=\"activity.cardName\"></app-activity>\n        </li>\n      </ul>\n    </div>\n    <button class=\"load-button\" (click)=\"loadMore()\">\n      <mat-icon style=\"margin-right: 5px;\">refresh</mat-icon> Load More\n    </button>\n</div>\n  \n"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-79e07c30bf60653dd5674dd00bd07d101b336f8cfc4990dd08d5567e6d011b6ed8bc69e3908b9f108cd8b15e7202d71c6e51e9f970de3561749897375e6d7084",
            "file": "src/app/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list",
            "styleUrls": [
                "./list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "List | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editedListTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isEditing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editListTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAddCardModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditCardModal",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { List } from '../_models/list';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CardModalComponent } from '../card-modal/card-modal.component';\r\nimport { Card } from '../_models/card';\r\nimport { ListService } from '../_services/list.service';\r\nimport { Store } from '@ngrx/store';\r\nimport * as BoardActions from '../store/actions/boards.actions';\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.css']\r\n})\r\n\r\n\r\nexport class ListComponent implements OnInit {\r\n  @Input() list: List | undefined;\r\n  isEditing: boolean = false;\r\n  editedListTitle: string = '';\r\n\r\n  constructor(public dialog: MatDialog, \r\n    private listService: ListService,\r\n    private store: Store) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  editListTitle() {\r\n    this.isEditing = true;\r\n    this.editedListTitle = this.list?.name || '';\r\n  }\r\n\r\n  saveEdit() {\r\n    if (this.editedListTitle.trim() === '' || !this.list) {\r\n      return;\r\n    }\r\n    const updatedList = { ...this.list, name: this.editedListTitle.trim() };\r\n    this.store.dispatch(BoardActions.updateList({ list: updatedList }));\r\n    this.isEditing = false;\r\n  }\r\n  \r\n  delete() {\r\n    if (!this.list) {\r\n      return;\r\n    }\r\n    this.listService.deleteList(this.list.id).subscribe({\r\n      next: () => {\r\n        this.list = undefined;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error deleting list:', error);\r\n      }\r\n    }\r\n    );\r\n  }\r\n  \r\n  cancelEdit() {\r\n    this.isEditing = false;\r\n    this.editedListTitle = '';\r\n  }\r\n\r\n  openAddCardModal() {\r\n    if(this.list && this.list.id){\r\n      const dialogRef = this.dialog.open(CardModalComponent, {\r\n      data: { listId: this.list.id }\r\n    });\r\n    \r\n    dialogRef.afterClosed().subscribe((result: Card | undefined) => {\r\n      if (result) {\r\n      }\r\n    });}\r\n  }\r\n  \r\n  openEditCardModal(card: Card) {\r\n    if(this.list)\r\n    this.dialog.open(CardModalComponent, {\r\n      data: { listId: card.boardListId, card: card}\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-container {\r\n    flex: 1;\r\n    min-width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 20px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    margin-left: 4px;\r\n    margin-right: 4px;\r\n}\r\n\r\n.list-header {\r\n    display: flex;\r\n    border-top: solid #a8a8a8 2px;\r\n    border-bottom: solid #a8a8a8 2px;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.list-name {\r\n    flex-grow: 1;\r\n}\r\n\r\n.dropdown-menu {\r\n    margin-left: 10px;\r\n}\r\n\r\n.list-content {\r\n    padding: 10px;\r\n}\r\n\r\n.add-card-button {\r\n    border: 2px dashed #ccc;\r\n    border-radius: 10px;\r\n    width: calc(100% - 20px);\r\n    margin: 10px;\r\n}\r\n\r\n.add-card-button mat-icon {\r\n    margin-right: 8px;\r\n}\r\n\r\n.list-title-input {\r\n    flex-grow: 1;\r\n    margin-right: 10px;\r\n}\r\n\r\n.button-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.edit-list-form {\r\n    min-width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n}\r\n\r\n.list-input {\r\n    width: calc(100% - 20px); \r\n    margin-top: 0px;\r\n    margin-bottom: 10px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    padding: 8px;\r\n    border-radius: 5px;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.button-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 0 10px;\r\n}\r\n\r\n.save-button{\r\n    flex-grow: 1;\r\n    margin-top: 5px;\r\n    margin-right: 5px;\r\n    background-color: gray;\r\n    color: white;\r\n    padding: 4px;\r\n    border: 0px;\r\n    border-radius: 5px;\r\n}\r\n.cancel-button {\r\n    flex-grow: 1;\r\n    padding: 4px;\r\n    margin-top: 5px;\r\n    margin-left: 5px;\r\n    background-color: rgb(255, 255, 255);\r\n    border: 2px solid rgb(216, 216, 216);\r\n    border-radius: 5px;\r\n}\r\n",
                    "styleUrl": "./list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listService",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"list\" class=\"list-container\">\r\n    <div *ngIf=\"!isEditing\" class=\"list-header\">\r\n        <h4>{{ list.name }}</h4>\r\n        <p style=\"margin-left: auto;margin-top: auto; font-size: 18px; height:20px;\">{{list.cards?.length}}</p>\r\n        <button mat-icon-button [matMenuTriggerFor]=\"listMenu\" aria-label=\"Menu\">\r\n          <mat-icon>more_vert</mat-icon>\r\n        </button>\r\n        <mat-menu #listMenu=\"matMenu\">\r\n          <button mat-menu-item (click)=\"isEditing = true\"><mat-icon>create</mat-icon> Edit</button>\r\n          <button mat-menu-item (click)=\"delete()\" style=\"color: red\"><mat-icon style=\"color: red\">delete_outline</mat-icon> Delete</button>\r\n        </mat-menu>\r\n    </div>\r\n    <div *ngIf=\"isEditing\" class=\"edit-list-form\">\r\n        <input type=\"text\" [(ngModel)]=\"editedListTitle\" class=\"list-input\" placeholder=\"Enter list title\">\r\n        <div class=\"button-container\">\r\n            <button class=\"save-button\" (click)=\"saveEdit()\">Save</button>\r\n            <button class=\"cancel-button\" (click)=\"cancelEdit()\">Cancel</button>\r\n        </div>\r\n    </div>\r\n    <button mat-raised-button aria-label=\"Add Card\" class=\"add-card-button\" (click)=\"openAddCardModal()\">\r\n        <mat-icon>add</mat-icon> Add Card\r\n    </button>\r\n    <div class=\"list-content\" cdkDropList>\r\n        <ul style=\"list-style-type: none; padding: 0;\">\r\n            <li *ngFor=\"let card of list.cards\">\r\n                <app-card [card]=\"card\" (editCardClicked)=\"openEditCardModal($event)\"></app-card>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-b699f318b772eec9143ecfb9fe77aad5f1206a20495bfcf0f235e696f6e63e7505635c931172ce42ef967c0e22a3d55ab03368032475fb6399b11986e6cf558c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, isDevMode } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport {HttpClientModule} from '@angular/common/http'\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { BoardComponent } from './board/board.component';\r\nimport { ActivityComponent } from './activity/activity.component';\r\nimport { CardComponent } from './card/card.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport { CardModalComponent } from './card-modal/card-modal.component';\r\nimport { CardDetailsModalComponent } from './card-details-modal/card-details-modal.component';\r\nimport { HistorySidebarComponent } from './history-sidebar/history-sidebar.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { BoardsEffects } from './store/effects/boards.effect';\r\nimport { boardReducer } from './store/reducers/boards.reducer';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    BoardComponent,\r\n    ActivityComponent,\r\n    CardComponent,\r\n    ListComponent,\r\n    HeaderComponent,\r\n    CardModalComponent,\r\n    CardDetailsModalComponent,\r\n    HistorySidebarComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatDialogModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    ReactiveFormsModule,\r\n    StoreModule.forRoot(),\r\n    EffectsModule.forRoot(),\r\n    StoreModule.forFeature('boards', boardReducer),\r\n    EffectsModule.forFeature([BoardsEffects]),\r\n    EffectsModule.forRoot([]),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: !isDevMode() }),\r\n  ],\r\n  exports:[\r\n    CardModalComponent,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BoardComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardDetailsModalComponent"
                        },
                        {
                            "name": "CardModalComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HistorySidebarComponent"
                        },
                        {
                            "name": "ListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-4eed6b645d5d695674f42c744adea1c71c4a2036b8aba42fa0c25c0c118bf43cb728b8357e168cbd45a84e30363174d4fbd6b19ba8cb13da47cc8a198898eb22",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BoardComponent } from './board/board.component';\n\nconst routes: Routes = [\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Add Board', props<{ title: string }>())"
            },
            {
                "name": "addBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Add Board Failure', props<{ error: any }>())"
            },
            {
                "name": "addBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Add Board Success', props<{ board: Board }>())"
            },
            {
                "name": "boardReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/boards.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n\r\n    on(BoardActions.loadBoardListsSuccess, (state, { lists }) => ({\r\n      ...state,\r\n      currentBoardLists: lists\r\n    })),\r\n\r\n    on(BoardActions.clearCurrentBoard, (state) => ({\r\n       ...state, \r\n       currentBoard: undefined \r\n    })),\r\n\r\n    on(BoardActions.loadBoardsSuccess, (state, action) => ({\r\n      ...state,\r\n      boards: action.boards,\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.loadBoardsFailure, (state, { error }) => ({\r\n      ...state,\r\n      boards: [],\r\n      error\r\n    })),\r\n\r\n    on(BoardActions.selectBoardSuccess, (state, { board }) => ({\r\n      ...state,\r\n      currentBoard: board,\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.selectBoardFailure, (state, { error }) => ({\r\n      ...state,\r\n      currentBoardId: null,\r\n      error\r\n    })),\r\n\r\n    on(BoardActions.addBoardSuccess, (state, { board }) => ({\r\n      ...state,\r\n      boards: [...state.boards, board],\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.addBoardFailure, (state, { error }) => ({\r\n      ...state,\r\n      error\r\n    })),\r\n\r\n    on(BoardActions.deleteBoardSuccess, (state, { boardId }) => ({\r\n      ...state,\r\n      boards: state.boards.filter(b => b.id !== boardId),\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.deleteBoardFailure, (state, { error }) => ({\r\n      ...state,\r\n      error\r\n    })),\r\n\r\n    on(BoardActions.updateBoardSuccess, (state, { board }) => ({\r\n      ...state,\r\n      boards: state.boards.map(b => (b.id === board.id ? { ...b, ...board } : b)),\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.updateBoardFailure, (state, { error }) => ({\r\n      ...state,\r\n      error\r\n    })),\r\n    \r\n    on(BoardActions.updateCardSuccess, (state, { card }) => ({\r\n      ...state,\r\n      currentBoardLists: state.currentBoardLists?.map(list =>\r\n          list.id === card.boardListId ? {\r\n              ...list,\r\n              cards: list.cards?.map(c => c.id === card.id ? card : c)\r\n          } : list\r\n      )\r\n    })),\r\n\r\n    on(BoardActions.updateListSuccess, (state, { list }) => ({\r\n      ...state,\r\n      currentBoardLists: state.currentBoardLists?.map(l => l.id === list.id ? { ...l, ...list } : l),\r\n      error: null\r\n    })),\r\n  )"
            },
            {
                "name": "boardsSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFeature, \r\n    (state) => state.boards\r\n)"
            },
            {
                "name": "clearCurrentBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Clear Current Board')"
            },
            {
                "name": "currentBoardListsSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFeature, \r\n    (state) => state.currentBoardLists\r\n)"
            },
            {
                "name": "currentBoardSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFeature, \r\n    (state) => state.currentBoard\r\n)"
            },
            {
                "name": "deleteBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Delete Board', props<{ boardId: string }>())"
            },
            {
                "name": "deleteBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Delete Board Failure', props<{ error: any }>())"
            },
            {
                "name": "deleteBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Delete Board Success', props<{ boardId: string }>())"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false,\n    apiUrl: 'https://localhost:7208/api',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "errorSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFeature, \r\n    (state) => state.error\r\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/boards.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardsState",
                "defaultValue": "{\r\n    boards: [],\r\n    currentBoard: undefined,\r\n    error: null,\r\n}"
            },
            {
                "name": "loadBoardLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[List] Load Board Lists', props<{ boardId: string }>())"
            },
            {
                "name": "loadBoardListsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[List] Load Board Lists Failure', props<{ error: any }>())"
            },
            {
                "name": "loadBoardListsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[List] Load Board Lists Success', props<{ lists: List[] }>())"
            },
            {
                "name": "loadBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Load Boards')"
            },
            {
                "name": "loadBoardsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Load Boards Failure', props<{ error: string }>())"
            },
            {
                "name": "loadBoardsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Load Boards Success', props<{ boards: Board[] }>())"
            },
            {
                "name": "selectBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Select Board',\r\n    props<{ boardId: string }>() \r\n)"
            },
            {
                "name": "selectBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Select Board Failure',\r\n    props<{ error: any }>() \r\n)"
            },
            {
                "name": "selectBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Select Board Success',\r\n    props<{ board: Board }>()\r\n)"
            },
            {
                "name": "selectFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AppState) => state.boards"
            },
            {
                "name": "updateBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] update Board', props<{ board: Board }>())"
            },
            {
                "name": "updateBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Update Board Failure', props<{ error: any }>())"
            },
            {
                "name": "updateBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board] Update Board Success', props<{ board: Board }>())"
            },
            {
                "name": "updateCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Card] Update Card', props<{ card: Card }>())"
            },
            {
                "name": "updateCardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Card] Update Card Failure', props<{ error: any }>())"
            },
            {
                "name": "updateCardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Card] Update Card Success', props<{ card: Card }>())"
            },
            {
                "name": "updateList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Card] Update List', props<{ list: List }>())"
            },
            {
                "name": "updateListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Card] Update List Failure', props<{ error: any }>())"
            },
            {
                "name": "updateListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/boards.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Card] Update List Success', props<{ list: List }>())"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/store/actions/boards.actions.ts": [
                {
                    "name": "addBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Add Board', props<{ title: string }>())"
                },
                {
                    "name": "addBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Add Board Failure', props<{ error: any }>())"
                },
                {
                    "name": "addBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Add Board Success', props<{ board: Board }>())"
                },
                {
                    "name": "clearCurrentBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Clear Current Board')"
                },
                {
                    "name": "deleteBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Delete Board', props<{ boardId: string }>())"
                },
                {
                    "name": "deleteBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Delete Board Failure', props<{ error: any }>())"
                },
                {
                    "name": "deleteBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Delete Board Success', props<{ boardId: string }>())"
                },
                {
                    "name": "loadBoardLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[List] Load Board Lists', props<{ boardId: string }>())"
                },
                {
                    "name": "loadBoardListsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[List] Load Board Lists Failure', props<{ error: any }>())"
                },
                {
                    "name": "loadBoardListsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[List] Load Board Lists Success', props<{ lists: List[] }>())"
                },
                {
                    "name": "loadBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Load Boards')"
                },
                {
                    "name": "loadBoardsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Load Boards Failure', props<{ error: string }>())"
                },
                {
                    "name": "loadBoardsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Load Boards Success', props<{ boards: Board[] }>())"
                },
                {
                    "name": "selectBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Select Board',\r\n    props<{ boardId: string }>() \r\n)"
                },
                {
                    "name": "selectBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Select Board Failure',\r\n    props<{ error: any }>() \r\n)"
                },
                {
                    "name": "selectBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Select Board Success',\r\n    props<{ board: Board }>()\r\n)"
                },
                {
                    "name": "updateBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] update Board', props<{ board: Board }>())"
                },
                {
                    "name": "updateBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Update Board Failure', props<{ error: any }>())"
                },
                {
                    "name": "updateBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board] Update Board Success', props<{ board: Board }>())"
                },
                {
                    "name": "updateCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Card] Update Card', props<{ card: Card }>())"
                },
                {
                    "name": "updateCardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Card] Update Card Failure', props<{ error: any }>())"
                },
                {
                    "name": "updateCardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Card] Update Card Success', props<{ card: Card }>())"
                },
                {
                    "name": "updateList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Card] Update List', props<{ list: List }>())"
                },
                {
                    "name": "updateListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Card] Update List Failure', props<{ error: any }>())"
                },
                {
                    "name": "updateListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/boards.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Card] Update List Success', props<{ list: List }>())"
                }
            ],
            "src/app/store/reducers/boards.reducer.ts": [
                {
                    "name": "boardReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/boards.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n\r\n    on(BoardActions.loadBoardListsSuccess, (state, { lists }) => ({\r\n      ...state,\r\n      currentBoardLists: lists\r\n    })),\r\n\r\n    on(BoardActions.clearCurrentBoard, (state) => ({\r\n       ...state, \r\n       currentBoard: undefined \r\n    })),\r\n\r\n    on(BoardActions.loadBoardsSuccess, (state, action) => ({\r\n      ...state,\r\n      boards: action.boards,\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.loadBoardsFailure, (state, { error }) => ({\r\n      ...state,\r\n      boards: [],\r\n      error\r\n    })),\r\n\r\n    on(BoardActions.selectBoardSuccess, (state, { board }) => ({\r\n      ...state,\r\n      currentBoard: board,\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.selectBoardFailure, (state, { error }) => ({\r\n      ...state,\r\n      currentBoardId: null,\r\n      error\r\n    })),\r\n\r\n    on(BoardActions.addBoardSuccess, (state, { board }) => ({\r\n      ...state,\r\n      boards: [...state.boards, board],\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.addBoardFailure, (state, { error }) => ({\r\n      ...state,\r\n      error\r\n    })),\r\n\r\n    on(BoardActions.deleteBoardSuccess, (state, { boardId }) => ({\r\n      ...state,\r\n      boards: state.boards.filter(b => b.id !== boardId),\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.deleteBoardFailure, (state, { error }) => ({\r\n      ...state,\r\n      error\r\n    })),\r\n\r\n    on(BoardActions.updateBoardSuccess, (state, { board }) => ({\r\n      ...state,\r\n      boards: state.boards.map(b => (b.id === board.id ? { ...b, ...board } : b)),\r\n      error: null\r\n    })),\r\n\r\n    on(BoardActions.updateBoardFailure, (state, { error }) => ({\r\n      ...state,\r\n      error\r\n    })),\r\n    \r\n    on(BoardActions.updateCardSuccess, (state, { card }) => ({\r\n      ...state,\r\n      currentBoardLists: state.currentBoardLists?.map(list =>\r\n          list.id === card.boardListId ? {\r\n              ...list,\r\n              cards: list.cards?.map(c => c.id === card.id ? card : c)\r\n          } : list\r\n      )\r\n    })),\r\n\r\n    on(BoardActions.updateListSuccess, (state, { list }) => ({\r\n      ...state,\r\n      currentBoardLists: state.currentBoardLists?.map(l => l.id === list.id ? { ...l, ...list } : l),\r\n      error: null\r\n    })),\r\n  )"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/boards.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardsState",
                    "defaultValue": "{\r\n    boards: [],\r\n    currentBoard: undefined,\r\n    error: null,\r\n}"
                }
            ],
            "src/app/store/selectors/selectors.ts": [
                {
                    "name": "boardsSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFeature, \r\n    (state) => state.boards\r\n)"
                },
                {
                    "name": "currentBoardListsSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFeature, \r\n    (state) => state.currentBoardLists\r\n)"
                },
                {
                    "name": "currentBoardSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFeature, \r\n    (state) => state.currentBoard\r\n)"
                },
                {
                    "name": "errorSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFeature, \r\n    (state) => state.error\r\n)"
                },
                {
                    "name": "selectFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.boards"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n    apiUrl: 'https://localhost:7208/api',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/-servicesboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServicesboardService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/activityLog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityLog",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/addListModel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddListModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Board",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/cardDto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardDto",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/activity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/board.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/card.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/activity/activity.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/card-details-modal/card-details-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardDetailsModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/card-modal/card-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/history-sidebar/history-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistorySidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/store/BoardsState.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardsState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearCurrentBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoardLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoardListsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoardListsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoardsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoardsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateCardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateCardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/boards.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/appSate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/boards.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/boards.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "boardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/boards.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "boardsSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currentBoardListsSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currentBoardSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}